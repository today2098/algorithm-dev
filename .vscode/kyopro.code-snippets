{
	// Place your algorithm-dev ワークスペース snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"My Template": {
		"scope": "cpp",
		"prefix": "main",
		"body": [
			"#include <bits/stdc++.h>",
			"#define REP(i, n)     for(int i = 0; i < (int)(n); ++i)",
			"#define RREP(i, n)    for(int i = (int)(n); i-- > 0;)",
			"#define FOR(i, l, r)  for(int i = (int)(l); i < (int)(r); ++i)",
			"#define RFOR(i, r, l) for(int i = (int)(r); i-- > (int)(l);)",
			"#define ALL(v)        std::begin(v), std::end(v)",
			"using llong = long long;",
			"using vi    = std::vector<int>;",
			"using vvi   = std::vector<vi>;",
			"using pii   = std::pair<int, int>;",
			"using namespace std;",
			"constexpr int       INF  = 1e9;",
			"constexpr long long LINF = 1e18;",
			"constexpr double    EPS  = 1e-10;",
			"constexpr int       MOD  = 998'244'353;",
			"constexpr int       MOD2 = 1e9 + 7;",
			"",
			"template <typename Type>",
			"inline std::istream &operator>>(std::istream &is, std::vector<Type> &v) {",
			"    for(auto &elem : v) is >> elem;",
			"    return is;",
			"}",
			"",
			"template <typename Type>",
			"inline std::ostream &operator<<(std::ostream &os, const std::vector<Type> &v) {",
			"    for(auto iter = v.cbegin(); iter != v.cend(); ++iter) os << (iter == v.cbegin() ? \"\" : \" \") << *iter;",
			"    return os;",
			"}",
			"",
			"#ifdef DEBUG",
			"",
			"#include \"debug.hpp\"",
			"",
			"#else",
			"",
			"#define debug(...) static_cast<void>(0)",
			"",
			"#endif",
			"",
			"int main(){$0}",
			""
		],
		"description": ""
	},
	"chmin, chmax": {
		"scope": "cpp",
		"prefix": "chmin, chmax",
		"body": [
			"template <typename Type>",
			"bool chmin(Type &a, const Type &b) {",
			"    if(a <= b) return false;",
			"    a = b;",
			"    return true;",
			"}",
			"",
			"template <typename Type>",
			"bool chmax(Type &a, const Type &b) {",
			"    if(a >= b) return false;",
			"    a = b;",
			"    return true;",
			"}"
		],
		"description": ""
	},
	"rotate": {
		"scope": "cpp",
		"prefix": "rotate",
		"body": [
			"// 2次元配列を反時計回りに90度回転させる．",
			"template <class Sequence>",
			"std::vector<Sequence> rotate90(const std::vector<Sequence> &vv) {",
			"    if(vv.empty()) return std::vector<Sequence>();",
			"    const int h = vv.size(), w = vv[0].size();",
			"    std::vector<Sequence> res(w, Sequence(h, 0));",
			"    for(int i = 0; i < h; ++i) {",
			"        for(int j = 0; j < w; ++j) res[w - 1 - j][i] = vv[i][j];",
			"    }",
			"    return res;",
			"}",
			"",
			"// 2次元配列を180度回転させる．",
			"template <class Sequence>",
			"std::vector<Sequence> rotate180(const std::vector<Sequence> &vv) {",
			"    if(vv.empty()) return std::vector<Sequence>();",
			"    const int h = vv.size(), w = vv[0].size();",
			"    std::vector<Sequence> res(h, Sequence(w, 0));",
			"    for(int i = 0; i < h; ++i) {",
			"        for(int j = 0; j < w; ++j) res[h - 1 - i][w - 1 - j] = vv[i][j];",
			"    }",
			"    return res;",
			"}",
			"",
			"// 2次元配列を反時計回りに270度（時計回りに90度）回転させる．",
			"template <class Sequence>",
			"std::vector<Sequence> rotate270(const std::vector<Sequence> &vv) {",
			"    if(vv.empty()) return std::vector<Sequence>();",
			"    const int h = vv.size(), w = vv[0].size();",
			"    std::vector<Sequence> res(w, Sequence(h, 0));",
			"    for(int i = 0; i < h; ++i) {",
			"        for(int j = 0; j < w; ++j) res[j][h - 1 - i] = vv[i][j];",
			"    }",
			"    return res;",
			"}"
		],
		"description": ""
	},
	"split": {
		"scope": "cpp",
		"prefix": "split",
		"body": [
			"// 文字列分割．文字列sを文字delimで分割する．",
			"std::vector<std::string> split(std::string_view sv, char delim, bool disable_empty = false) {",
			"    std::vector<std::string> res;",
			"    std::stringstream ss;",
			"    ss << sv << delim;",
			"    std::string item;",
			"    while(std::getline(ss, item, delim)) {",
			"        if(!(item.empty() and disable_empty)) res.push_back(item);",
			"    }",
			"    return res;",
			"}",
			"",
			"// 文字列分割．文字列sを文字列delimで分割する．",
			"std::vector<std::string> split(std::string_view sv, std::string_view delim, bool disable_empty = false) {",
			"    std::vector<std::string> res;",
			"    const std::size_t length = delim.length();",
			"    std::size_t offset = 0;",
			"    while(true) {",
			"        std::size_t pos = sv.find(delim, offset);",
			"        if(pos == std::string::npos) {",
			"            auto item = sv.substr(offset);",
			"            if(!(item.empty() and disable_empty)) res.push_back(std::string(item));",
			"            break;",
			"        }",
			"        auto item = sv.substr(offset, pos - offset);",
			"        if(!(item.empty() and disable_empty)) res.push_back(std::string(item));",
			"        offset = pos + length;",
			"    }",
			"    return res;",
			"}",
			"",
			"// 文字列分割．文字列sを正規表現patternにマッチする文字列で分割する．",
			"std::vector<std::string> split_by_regex(std::string_view s, const std::regex &pattern, bool disable_empty = false) {",
			"    std::vector<std::string> res;",
			"    for(std::regex_token_iterator<std::string_view::const_iterator> iter(s.cbegin(), s.cend(), pattern, -1), end; iter != end; ++iter) {",
			"        if(!((*iter).str().empty() and disable_empty)) res.push_back((*iter).str());",
			"    }",
			"    return res;",
			"}",
			"",
			"// 文字列分割．文字列sを正規表現patternにマッチする文字列で分割する．",
			"std::vector<std::string> split_by_regex(std::string_view sv, std::string_view pattern, bool disable_empty = false) {",
			"    return split_by_regex(sv, std::regex(pattern.cbegin(), pattern.cend()), disable_empty);",
			"}"
		],
		"description": "文字列分割"
	},
	"table": {
		"scope": "cpp",
		"prefix": "table",
		"body": [
			"template <typename Type>",
			"std::vector<Type> table(std::size_t n, const Type &val) { return std::vector<Type>(n, val); }",
			"",
			"template <typename... Args>",
			"auto table(std::size_t n, const Args &...args) { return std::vector(n, table(args...)); }"
		],
		"description": "多次元配列生成"
	},
	"dydx4": {
		"scope": "cpp",
		"prefix": "dydx4",
		"body": [
			"constexpr std::pair<int, int> dydx4[] = {{-1, 0}, {0, -1}, {0, 1}, {1, 0}};",
		],
		"description": "グリッドの4近傍"
	},
	"dydx8": {
		"scope": "cpp",
		"prefix": "dydx8",
		"body": [
			"constexpr std::pair<int, int> dydx8[] = {{-1, -1}, {-1, 0}, {-1, 1}, {0, -1}, {0, 1}, {1, -1}, {1, 0}, {1, 1}};",
		],
		"description": "グリッドの8近傍"
	},
	"is_inner": {
		"scope": "cpp",
		"prefix": "is_inner",
		"body": [
			"auto is_inner = [](int h, int w, int y, int x) -> bool {",
			"    return (0 <= y and y < h and 0 <= x and x < w);",
			"};",
		],
		"description": ""
	}
}