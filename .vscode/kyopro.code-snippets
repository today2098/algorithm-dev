{
	// Place your algorithm-dev ワークスペース snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"My Template": {
		"scope": "cpp",
		"prefix": "main",
		"body": [
			"#include <bits/stdc++.h>",
			"#define REP(i, n)    for(int i = 0; i < (int)(n); ++i)",
			"#define FOR(i, l, r) for(int i = (int)(l); i < (int)(r); ++i)",
			"#define ALL(v)       (v).begin(), (v).end()",
			"using llong = long long;",
			"using vi    = std::vector<int>;",
			"using vvi   = std::vector<vi>;",
			"using pii   = std::pair<int, int>;",
			"using namespace std;",
			"constexpr int       INF  = 1e9;",
			"constexpr long long LINF = 1e18;",
			"constexpr double    EPS  = 1e-10;",
			"constexpr int       MOD  = 998'244'353;",
			"constexpr int       MOD2 = 1e9 + 7;",
			"",
			"template <typename Type>",
			"inline std::istream &operator>>(std::istream &is, std::vector<Type> &v) {",
			"    for(Type &in : v) is >> in;",
			"    return is;",
			"}",
			"",
			"template <typename Type>",
			"inline std::ostream &operator<<(std::ostream &os, const std::vector<Type> &v) {",
			"    for(auto itr = v.cbegin(); itr != v.cend(); ++itr) os << (itr == v.cbegin() ? \"\" : \" \") << *itr;",
			"    return os;",
			"}",
			"",
			"int main(){$0}",
			""
		],
		"description": ""
	}
}